EN POM.XML:

<dependency>
<groupId>org.mapstruct</groupId>
<artifactId>mapstruct</artifactId>
<version>1.6.3</version>
</dependency>

-----------------------------------------------------
			<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.8.1</version>
				<configuration>
				<source>17</source>
				<target>17</target>
				<annotationProcessorPaths>
					<path>
						<groupId>org.mapstruct</groupId>
						<artifactId>mapstruct-processor</artifactId>
						<version>1.6.3</version>
					</path>
				</annotationProcessorPaths>
				</configuration>
			</plugin>


CREAR CLASE NoSuchElementExceptionCA:

	@ControllerAdvice
class NoSuchElementExceptionControllerAdvice {
 @ResponseStatus(HttpStatus.NOT_FOUND)
 @ExceptionHandler(NoSuchElementException.class)
 public void handleNoTFound() {
 }
}



AÑADIR/REMPLAZAR EN LOS SERVICES FUNCIONES:

ProductService:

	@Autowired
	private BookMapper mapper;

	private ProductDTO toDTO(Product product) {
		return mapper.toDTO(product);
	}

	private Product toDomain(ProductDTO productDTO) {
		return mapper.toDomain(productDTO);
	}

	private List<BookDTO> toDTOs(List<Product> products) {
		return mapper.toDTOs(products);
	}

	public ProductDTO deleteProduct(long id) {

		Product product = productRepository.findById(id).orElseThrow();

		//As books are related to shops, it is needed to load the book shops 
		//before deleting it to avoid LazyInitializationException
		ProductDTO productDTO = toDTO(product);

		productRepository.deleteById(id);

		return productDTO;
	}

	public ProductDTO saveProduct(ProductDTO productDTO) {

		if(productDTO.id() != null) {
			throw new IllegalArgumentException();
		}

		Product product = toDomain(productDTO);

		productRepository.save(product);

		//Coger el usuario y añadirle el producto
		

		return toDTO(product);
	}

	
	public ProductDTO findById(long id) {

		return toDTO(productRepository.findById(id).orElseThrow());
	}

	public List<ProductDTO> findAllById(List<Long> productIds) {

		return toDTOs(productRepository.findAll());
	}



UserService:
	@Autowired
	private UserRepository userRepository;

	@Autowired
	private UserMapper mapper;

	public UserDTO getUser(String name) {
		return mapper.toDTO(userRepository.findByName(name).orElseThrow());
	}

	public User getLoggedUser() {
        String username = SecurityContextHolder.getContext().getAuthentication().getName();
        return userRepository.findByName(username).get();
    }

	public UserDTO getLoggedUserDTO() {
        return mapper.toDTO(getLoggedUser());
    }



CREAR VERSIONES DE LOS CONTROLLERS PARA REST

UserRestController:
	@RestController
@RequestMapping("/api/users")
public class UserRestController {
	
	@Autowired
	private UserService userService;

	@GetMapping("/me")
	public UserDTO me() {
		return userService.getLoggedUserDTO();
	}
}







ProductRestController: (COMO LO TIENE EL PROFE)

@RestController
@RequestMapping("/api/books")
public class BookRestController {

	@Autowired
	private BookService bookService;

	@GetMapping("/")
	public Collection<BookDTO> getBooks() {

		return bookService.getBooks();
	}

	@GetMapping("/{id}")
	public BookDTO getBook(@PathVariable long id) {

		return bookService.getBook(id);
	}

	@PostMapping("/")
	public ResponseEntity<BookDTO> createBook(@RequestBody BookDTO bookDTO) {

		bookDTO = bookService.createBook(bookDTO);

		URI location = fromCurrentRequest().path("/{id}").buildAndExpand(bookDTO.id()).toUri();

		return ResponseEntity.created(location).body(bookDTO);
	}

	@PutMapping("/{id}")
	public BookDTO replaceBook(@PathVariable long id, @RequestBody BookDTO updatedBookDTO) throws SQLException {

		return bookService.replaceBook(id, updatedBookDTO);
	}

	@DeleteMapping("/{id}")
	public BookDTO deleteBook(@PathVariable long id) {

		return bookService.deleteBook(id);
	}

	@PostMapping("/{id}/image")
	public ResponseEntity<Object> createBookImage(@PathVariable long id, @RequestParam MultipartFile imageFile)
			throws IOException {

		bookService.createBookImage(id, imageFile.getInputStream(), imageFile.getSize());

		URI location = fromCurrentRequest().build().toUri();

		return ResponseEntity.created(location).build();
	}

	@GetMapping("/{id}/image")
	public ResponseEntity<Object> getBookImage(@PathVariable long id) throws SQLException, IOException {

		Resource postImage = bookService.getBookImage(id);

		return ResponseEntity
				.ok()
				.header(HttpHeaders.CONTENT_TYPE, "image/jpeg")
				.body(postImage);

	}

	@PutMapping("/{id}/image")
	public ResponseEntity<Object> replaceBookImage(@PathVariable long id, @RequestParam MultipartFile imageFile)
			throws IOException {

		bookService.replaceBookImage(id, imageFile.getInputStream(), imageFile.getSize());

		return ResponseEntity.noContent().build();
	}

	@DeleteMapping("/{id}/image")
	public ResponseEntity<Object> deleteBookImage(@PathVariable long id) throws IOException {

		bookService.deleteBookImage(id);

		return ResponseEntity.noContent().build();
	}
}







CREAR "MODELOS" DTO QUE VAYAN EN SU PROPIA CARPETA:

ProductDTO:
	public record ProductDTO(
		Long id,
    		String name,
   		Double price,
    		int stock,
    		String provider,

		String description,

    		List<UserDTO> users,


    		boolean image,

    		List<ReviewDTO> reviews,

    		List<OrderDTO> orders){}
